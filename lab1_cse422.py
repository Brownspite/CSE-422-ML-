# -*- coding: utf-8 -*-
"""lab1 cse422.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15w4eIlKIlW1kGwmTInx6QemewH-9pwzf
"""



import heapq

def fetch_data(file_location):
    map_data = {}
    h_values = {}

    with open(file_location, 'r') as doc:
        for info in doc:
            parts = info.split()
            key_point = parts[0]
            h_score = int(parts[1])
            h_values[key_point] = h_score
            links = {}
            for j in range(2, len(parts), 2):
                adj_point = parts[j]
                dist = int(parts[j + 1])
                links[adj_point] = dist
            map_data[key_point] = links
    return map_data, h_values
def pathfind(map_data, h_values, origin, target):
    queue = []
    heapq.heappush(queue, (h_values[origin], 0, origin, []))
    visited = set()

    while queue:
        _, travel, node, journi = heapq.heappop(queue)
        if node in visited:
            continue
        journi = journi + [node]
        if node == target:
            return journi, travel
        visited.add(node)
        for adj, dist in map_data[node].items():
            if adj not in visited:
                new_travel = travel + dist
                est_cost = new_travel + h_values[adj]
                heapq.heappush(queue, (est_cost, new_travel, adj, journi))
    return None, None
def main():
    file_location = "Input file.txt"
    map_data, h_values = fetch_data(file_location)

    origin = input("Enter starting point: ")
    target = input("Enter destination point: ")
    journi, travel = pathfind(map_data, h_values, origin, target)
    if journi:
        print(f"Path: {' -> '.join(journi)}")
        print(f"Total distance: {travel} km")
    else:
        print("NO PATH FOUND")
if __name__ == "__main__":
    main()