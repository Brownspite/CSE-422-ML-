# -*- coding: utf-8 -*-
"""cse422labassignment0422301442.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1La1d9kr4YM6mj68GOTqIxxFghHI6PjeV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score, roc_curve

data = pd.read_csv('Heart Disease.csv')
data.columns = [col.strip() for col in data.columns]
data = data.applymap(lambda val: val.strip() if isinstance(val, str) else val)
data = data.dropna()
target = data.columns[-1]
print("Target column selected:", target)

X = data.drop(columns=[target])
y = data[target]
if y.dtype == 'object':
    y = pd.factorize(y)[0]
X = pd.get_dummies(X, drop_first=True)
for column in X.columns:
    X[column] = pd.to_numeric(X[column], errors='coerce')
if X.isnull().any().sum() > 0:
    print("Dropping columns with non-numeric data:", X.columns[X.isnull().any()].tolist())
    X = X.dropna(axis=1)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]
conf_matrix = confusion_matrix(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
auc = roc_auc_score(y_test, y_proba)

print("\nConfusion Matrix:\n", conf_matrix)
print("Precision:", round(precision, 3))
print("Recall:", round(recall, 3))
print("F1 Score:", round(f1, 3))
print("AUC Score:", round(auc, 3))

fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label=f'Logistic Regression (AUC = {auc:.2f})')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.grid(True)
plt.show()